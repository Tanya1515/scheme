(define (2n!-list n)
  (if (<= n 0) 
      '()
      (if (integer? n)
          (let recursion ( (i 1) (res 1) (result '() ))
            (cond (
                   (and (<= i n) (even? i)) (recursion (+ i 1) (* i res) (cons (* i res) result)))
                 ( (and (<= i n) (not(even? i))) (recursion (+ i 1) (* i res) result ))
              (else (reverse result))   
              )
            ) 
          '()
          )
      )
 )
